{"ast":null,"code":"import _defineProperty from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport AlphaBanner from 'components/base/AlphaBanner';\nimport MainHeader from 'components/base/MainHeader';\nimport TernoaWallet from 'components/base/TernoaWallet';\nimport Create from 'components/pages/Create';\nimport ModalMint from 'components/pages/Create/ModalMint';\nimport NotAvailableModal from 'components/base/NotAvailable';\nimport Router from 'next/router';\nimport { getUser } from 'actions/user';\nimport { imgToBlur, imgToWatermark } from 'utils/imageProcessing/image';\nexport var __N_SSP = true;\n\nvar CreatePage = function CreatePage(_ref) {\n  var user = _ref.user;\n\n  var _useState = useState(false),\n      modalExpand = _useState[0],\n      setModalExpand = _useState[1];\n\n  var _useState2 = useState(false),\n      notAvailable = _useState2[0],\n      setNotAvailable = _useState2[1];\n\n  var _useState3 = useState(false),\n      modalCreate = _useState3[0],\n      setModalCreate = _useState3[1];\n\n  var _useState4 = useState('Select NFT Option'),\n      select = _useState4[0],\n      setSelect = _useState4[1];\n\n  var _useState5 = useState(false),\n      processed = _useState5[0],\n      setProcessed = _useState5[1];\n\n  var _useState6 = useState(''),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState([]),\n      output = _useState7[0],\n      setOutput = _useState7[1];\n\n  var isNftCreationEnabled = process.env.NEXT_PUBLIC_IS_NFT_CREATION_ENABLED === undefined ? true : process.env.NEXT_PUBLIC_IS_NFT_CREATION_ENABLED === 'true';\n\n  var _React$useState = React.useState({\n    name: '',\n    description: '',\n    quantity: 1\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      NFTData = _React$useState2[0],\n      setNFTData = _React$useState2[1];\n\n  var _useState8 = useState(user),\n      walletUser = _useState8[0],\n      setWalletUser = _useState8[1];\n\n  useEffect(function () {\n    function callBack() {\n      return _callBack.apply(this, arguments);\n    }\n\n    function _callBack() {\n      _callBack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return getUser(window.walletId);\n\n              case 3:\n                res = _context.sent;\n                setWalletUser(res);\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n      return _callBack.apply(this, arguments);\n    }\n\n    if (window.isRNApp && window.walletId) callBack();\n  }, []);\n  useEffect(function () {\n    if (!isNftCreationEnabled) {\n      Router.push(\"/\");\n    }\n  }, [isNftCreationEnabled]);\n\n  var _useState9 = useState(null),\n      NFT = _useState9[0],\n      setNFT = _useState9[1];\n\n  var _useState10 = useState(null),\n      secretNFT = _useState10[0],\n      setSecretNFT = _useState10[1];\n\n  var name = NFTData.name,\n      description = NFTData.description,\n      quantity = NFTData.quantity;\n\n  var _useState11 = useState({\n    links: output,\n    walletId: user ? user.walletId : '',\n    fileHash: '',\n    price: 1\n  }),\n      QRData = _useState11[0],\n      setQRData = _useState11[1];\n\n  useEffect(function () {\n    if (processed) {\n      uploadNFT();\n    }\n  }, [processed]);\n\n  function processFile() {\n    return _processFile.apply(this, arguments);\n  }\n\n  function _processFile() {\n    _processFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _processFile2, res, blob, file, _processFile3, _res, _blob, _file;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (secretNFT) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error();\n\n            case 3:\n              setOutput([]);\n              setError('');\n\n              if (!(select === 'Blur' && secretNFT.type.substr(0, 5) === 'image')) {\n                _context2.next = 20;\n                break;\n              }\n\n              _processFile2 = new File([secretNFT], 'NFT', {\n                type: secretNFT.type\n              });\n              _context2.next = 9;\n              return imgToBlur(_processFile2);\n\n            case 9:\n              res = _context2.sent;\n              _context2.next = 12;\n              return fetch(res);\n\n            case 12:\n              _context2.next = 14;\n              return _context2.sent.blob();\n\n            case 14:\n              blob = _context2.sent;\n              file = new File([blob], secretNFT.name, {\n                type: secretNFT.type\n              });\n              setNFT(file);\n              setProcessed(true);\n              _context2.next = 33;\n              break;\n\n            case 20:\n              if (!(select === 'Protect' && secretNFT.type.substr(0, 5) === 'image')) {\n                _context2.next = 33;\n                break;\n              }\n\n              _processFile3 = new File([secretNFT], 'NFT', {\n                type: secretNFT.type\n              });\n              _context2.next = 24;\n              return imgToWatermark(_processFile3);\n\n            case 24:\n              _res = _context2.sent;\n              _context2.next = 27;\n              return fetch(_res);\n\n            case 27:\n              _context2.next = 29;\n              return _context2.sent.blob();\n\n            case 29:\n              _blob = _context2.sent;\n              _file = new File([_blob], secretNFT.name, {\n                type: secretNFT.type\n              });\n              setNFT(_file);\n              setProcessed(true);\n\n            case 33:\n              _context2.next = 39;\n              break;\n\n            case 35:\n              _context2.prev = 35;\n              _context2.t0 = _context2[\"catch\"](0);\n              setError('Please try again.');\n              console.log(_context2.t0);\n\n            case 39:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 35]]);\n    }));\n    return _processFile.apply(this, arguments);\n  }\n\n  function uploadNFT() {\n    return _uploadNFT.apply(this, arguments);\n  }\n\n  function _uploadNFT() {\n    _uploadNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data, resUpload, _yield$resUpload$json, previewLink, mediaType, cryptPromises, i, formData, cryptResults, cryptJSONs, results, JSONPromises, JSONURLS;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n\n              if (!user) {\n                setError('Please login to create an NFT.');\n              }\n\n              if (!(!secretNFT || !name || !description || !NFT && !(select === 'Select NFT Option' || select === 'None'))) {\n                _context3.next = 4;\n                break;\n              }\n\n              throw new Error('Elements are undefined');\n\n            case 4:\n              data = new FormData();\n              NFT ? data.append('file', NFT) : data.append('file', secretNFT);\n              _context3.next = 8;\n              return fetch(\"\".concat(process.env.NEXT_PUBLIC_SDK_URL, \"/api/uploadIM\"), {\n                method: 'POST',\n                body: data\n              });\n\n            case 8:\n              resUpload = _context3.sent;\n              _context3.next = 11;\n              return resUpload.json();\n\n            case 11:\n              _yield$resUpload$json = _context3.sent;\n              previewLink = _yield$resUpload$json.url;\n              mediaType = _yield$resUpload$json.mediaType;\n              cryptPromises = [];\n\n              for (i = 0; i < quantity; i++) {\n                formData = new FormData();\n                formData.append('file', secretNFT);\n                cryptPromises.push(fetch(\"\".concat(process.env.NEXT_PUBLIC_SDK_URL, \"/api/cryptFile\"), {\n                  method: 'POST',\n                  body: formData\n                }));\n              }\n\n              _context3.prev = 16;\n              _context3.next = 19;\n              return Promise.all(cryptPromises);\n\n            case 19:\n              cryptResults = _context3.sent;\n              _context3.next = 22;\n              return Promise.all(cryptResults.map(function (r) {\n                return r.json();\n              }));\n\n            case 22:\n              cryptJSONs = _context3.sent;\n              results = cryptJSONs.map(function (result, index) {\n                return fetch(\"\".concat(process.env.NEXT_PUBLIC_SDK_URL, \"/api/uploadEx\"), {\n                  method: 'POST',\n                  body: new URLSearchParams({\n                    name: name,\n                    description: description,\n                    fileHash: result.fileHash,\n                    keyPath: result.keyPath,\n                    media: previewLink,\n                    mediaType: mediaType,\n                    cryptedMedia: result.file,\n                    cryptedMediaType: secretNFT.type,\n                    itemTotal: quantity + '',\n                    itemId: index + 1 + ''\n                  })\n                });\n              });\n              _context3.next = 26;\n              return Promise.all(results);\n\n            case 26:\n              JSONPromises = _context3.sent;\n              _context3.next = 29;\n              return Promise.all(JSONPromises.map(function (r) {\n                return r.json();\n              }));\n\n            case 29:\n              JSONURLS = _context3.sent;\n              setOutput(JSONURLS);\n              setQRData(_objectSpread(_objectSpread({}, QRData), {}, {\n                links: JSONURLS,\n                fileHash: cryptJSONs[0].fileHash\n              }));\n              setProcessed(false);\n              _context3.next = 38;\n              break;\n\n            case 35:\n              _context3.prev = 35;\n              _context3.t0 = _context3[\"catch\"](16);\n              console.error(_context3.t0);\n\n            case 38:\n              return _context3.abrupt(\"return\", output);\n\n            case 41:\n              _context3.prev = 41;\n              _context3.t1 = _context3[\"catch\"](0);\n              setError('Please try again.');\n              console.log(_context3.t1);\n              return _context3.abrupt(\"return\", []);\n\n            case 46:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 41], [16, 35]]);\n    }));\n    return _uploadNFT.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"SecretNFT - Create your NFT\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"SecretNFT Marketplace, by Ternoa.\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: \"ternoa-social-banner.jpg\"\n      })]\n    }), modalExpand && /*#__PURE__*/_jsx(TernoaWallet, {\n      setModalExpand: setModalExpand\n    }), notAvailable && /*#__PURE__*/_jsx(NotAvailableModal, {\n      setNotAvailable: setNotAvailable\n    }), modalCreate && /*#__PURE__*/_jsx(ModalMint, {\n      setModalCreate: setModalCreate,\n      processed: processed,\n      error: error,\n      setError: setError,\n      output: output,\n      QRData: QRData\n    }), /*#__PURE__*/_jsx(AlphaBanner, {}), /*#__PURE__*/_jsx(MainHeader, {\n      user: walletUser,\n      setModalExpand: setModalExpand\n    }), isNftCreationEnabled && /*#__PURE__*/_jsx(Create, {\n      setModalExpand: setModalExpand,\n      setNotAvailable: setNotAvailable,\n      setModalCreate: setModalCreate,\n      user: walletUser,\n      NFT: NFT,\n      setNFT: setNFT,\n      secretNFT: secretNFT,\n      setSecretNFT: setSecretNFT,\n      NFTData: NFTData,\n      setNFTData: setNFTData,\n      select: select,\n      setSelect: setSelect,\n      processFile: processFile,\n      setError: setError,\n      setProcessed: setProcessed\n    })]\n  });\n};\n\nexport default CreatePage;","map":null,"metadata":{},"sourceType":"module"}