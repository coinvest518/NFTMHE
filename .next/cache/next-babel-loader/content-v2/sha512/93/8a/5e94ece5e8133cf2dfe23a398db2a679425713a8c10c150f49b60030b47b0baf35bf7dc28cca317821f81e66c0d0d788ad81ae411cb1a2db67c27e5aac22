{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useState, useEffect } from 'react';\nimport style from './ModalMint.module.scss';\nimport Close from 'components/assets/close';\nimport randomstring from 'randomstring';\nimport QRCode from 'components/base/QRCode';\nimport CheckMark from 'components/assets/checkmark';\nimport { useRouter } from 'next/router';\nimport { connect as connectIo } from 'utils/socket/socket.helper';\n\nconst ModalMint = ({\n  setModalCreate,\n  error,\n  setError,\n  output,\n  QRData\n}) => {\n  const {\n    0: session\n  } = useState(randomstring.generate());\n  const {\n    0: showQR,\n    1: setShowQR\n  } = useState(false);\n  const {\n    0: isRN,\n    1: setIsRN\n  } = useState(false);\n  const {\n    0: mintReponse,\n    1: setMintResponse\n  } = useState(null);\n  const router = useRouter();\n  const {\n    walletId,\n    price,\n    links,\n    fileHash\n  } = QRData;\n\n  const handleMintSocketProcess = () => {\n    console.log('socket connect on session', session);\n    const socket = connectIo(`/socket/createNft`, {\n      session\n    }, undefined, 5 * 60 * 1000);\n    socket.on('CONNECTION_SUCCESS', () => {\n      if (isRN) {\n        const data = {\n          session,\n          walletId,\n          price,\n          links,\n          fileHash\n        };\n        setTimeout(function () {\n          window.ReactNativeWebView.postMessage(JSON.stringify({\n            action: 'MINT',\n            data\n          }));\n        }, 2000);\n      } else {\n        setShowQR(true);\n      }\n    });\n    socket.on('connect_error', e => {\n      console.error('connection error socket', e);\n      setModalCreate(false);\n    });\n    socket.on('CONNECTION_FAILURE', data => setError(data.msg));\n    socket.on('MINTING_NFT', ({\n      success\n    }) => {\n      console.log('MINTING_NFT:' + success);\n      socket.emit('MINTING_NFT_RECEIVED');\n      socket.close();\n      setMintResponse(success);\n      setTimeout(() => {\n        setModalCreate(false);\n        router.back();\n      }, 4000);\n    });\n    socket.on('disconnect', () => {\n      setModalCreate(false);\n    });\n    return () => {\n      if (socket && socket.connected) {\n        socket.close();\n      }\n    };\n  };\n\n  useEffect(() => {\n    setIsRN(window.isRNApp);\n  }, []);\n  useEffect(() => {\n    console.log('showQR', showQR);\n\n    if (showQR) {\n      handleMintSocketProcess();\n    }\n  }, [showQR]);\n  useEffect(() => {\n    if (output.length > 0) {\n      setShowQR(true);\n    }\n  }, [output]);\n\n  function returnState() {\n    if (output.length > 0) {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [mintReponse === null && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: style.Text,\n            children: \"Flash this QR Code on your mobile wallet app to mint your NFT on the Ternoa blockchain.\"\n          }), showQR && /*#__PURE__*/_jsx(\"div\", {\n            className: style.QR,\n            children: /*#__PURE__*/_jsx(QRCode, {\n              data: {\n                session,\n                walletId,\n                price,\n                links,\n                fileHash\n              },\n              action: 'MINT'\n            })\n          }), !showQR && /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Loading,\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: style.Dot\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: style.Dot\n            }), /*#__PURE__*/_jsx(\"span\", {\n              className: style.Dot\n            })]\n          })]\n        }), mintReponse === true && /*#__PURE__*/_jsx(\"div\", {\n          className: style.Text,\n          children: \"Mint was added to the blockchain.\"\n        }), mintReponse === false && /*#__PURE__*/_jsx(\"div\", {\n          className: style.Text,\n          children: \"Mint was not added to the blockchain.\"\n        })]\n      });\n    } else {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style.Text,\n          children: \"Please wait while we are processing your files.\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: style.Status,\n          children: output.length > 0 ? /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Step,\n            children: [\"Upload completed \", /*#__PURE__*/_jsx(CheckMark, {\n              className: style.CheckMark\n            })]\n          }) : /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Waiting,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: style.Mess,\n              children: \"Minting NFT...\"\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: style.Loading,\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                className: style.Dot\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: style.Dot\n              }), /*#__PURE__*/_jsx(\"span\", {\n                className: style.Dot\n              })]\n            })]\n          })\n        })]\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    id: \"createModal\",\n    className: style.Background,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: style.Container,\n      children: [/*#__PURE__*/_jsx(Close, {\n        onClick: () => setModalCreate(false),\n        className: style.Close\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: style.Title,\n        children: \"Create NFT\"\n      }), error ? /*#__PURE__*/_jsx(\"div\", {\n        className: style.Error,\n        children: error\n      }) : returnState()]\n    })\n  });\n};\n\nexport default ModalMint;","map":null,"metadata":{},"sourceType":"module"}