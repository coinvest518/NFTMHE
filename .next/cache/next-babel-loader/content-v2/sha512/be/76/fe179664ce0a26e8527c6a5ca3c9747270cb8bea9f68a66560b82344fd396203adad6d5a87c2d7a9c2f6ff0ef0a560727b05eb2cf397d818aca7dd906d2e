{"ast":null,"code":"import { envStringToCondition } from '../utils/strings';\nexport const filterNFTs = data => data.filter(item => item.creatorData && item.ownerData && item.media && envStringToCondition(Number(item.id)));\nexport const getNFTS = async () => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/NFTs`);\n  let data = await res.json();\n  data = filterNFTs(data);\n  return data;\n};\nexport const getProfileNFTS = async (id) => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/NFTs/owner/${id}`);\n  if (!res.ok) throw new Error('error fetching owned NFTs');\n  let data = await res.json();\n  data = filterNFTs(data);\n  return data;\n};\nexport const getCreatorNFTS = async id => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/NFTs/creator/${id}`);\n  if (!res.ok) throw new Error('error fetching created NFTs');\n  let data = await res.json();\n  data = filterNFTs(data);\n  return data;\n};\nexport const getCategoryNFTs = async codes => {\n  const queryString = !codes ? \"\" : typeof codes === 'string' ? `&codes=${codes}` : `&codes=${codes.join(\"&codes=\")}`;\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/NFTs/category/?listed=1${queryString}`);\n  if (!res.ok) throw new Error('error fetching NFTs');\n  let data = await res.json();\n  data = filterNFTs(data);\n  return data;\n};\nexport const getNFT = async (id, incViews = false, viewerWalletId = null) => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/NFTs/${id}?incViews=${incViews}&viewerWalletId=${viewerWalletId}`);\n  if (!res.ok) throw new Error();\n  let data = await res.json();\n  if (!data.creatorData || !data.ownerData || !data.media) throw new Error();\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}