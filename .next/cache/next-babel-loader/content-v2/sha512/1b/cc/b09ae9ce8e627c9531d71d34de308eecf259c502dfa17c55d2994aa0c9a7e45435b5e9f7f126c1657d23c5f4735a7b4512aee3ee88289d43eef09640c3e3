{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { filterNFTs } from \"./nft\";\nexport const getUser = async token => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/${token}`);\n  if (!res.ok) throw new Error();\n  const userData = await res.json();\n  const capsResponse = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/${token}/caps`);\n  let capsData = null;\n\n  if (capsResponse.ok) {\n    capsData = await capsResponse.json();\n  }\n\n  return _objectSpread(_objectSpread({}, userData), capsData);\n};\nexport const getProfile = async (id, walletId) => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/${id}?incViews=${true}&walletIdViewer=${walletId}`);\n  if (!res.ok) throw new Error();\n  return await res.json();\n};\nexport const getAccountBalance = async id => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/${id}/caps`);\n  if (!res.ok) throw new Error();\n  const data = await res.json();\n  return data.capsAmout;\n};\nexport const getUsers = async () => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users`);\n  if (!res.ok) throw new Error();\n  const data = await res.json();\n  return data.docs;\n};\nexport const reviewRequested = async walletId => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/reviewRequested/${walletId}`, {\n    method: 'PATCH'\n  });\n  if (!res.ok) throw new Error();\n  const userData = await res.json();\n  return userData;\n};\nexport const likeNFT = async (walletId, nftId) => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/like/?walletId=${walletId}&nftId=${nftId}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error();\n  const user = await res.json();\n  return user;\n};\nexport const unlikeNFT = async (walletId, nftId) => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/unlike/?walletId=${walletId}&nftId=${nftId}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error();\n  const user = await res.json();\n  return user;\n};\nexport const getLikedNFTs = async walletId => {\n  const res = await fetch(`${process.env.NEXT_PUBLIC_NODE_API}/api/mp/users/${walletId}/liked`);\n  if (!res.ok) throw new Error();\n  const nfts = await res.json();\n  return filterNFTs(nfts);\n};","map":null,"metadata":{},"sourceType":"module"}