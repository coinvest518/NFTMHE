{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nconst loader = '/loader.svg';\n\nconst timer = ms => new Promise(res => setTimeout(res, ms));\n\nconst defaultFallback = \"\";\nconst totalRetries = 5;\n\nconst Media = (_ref) => {\n  let {\n    src,\n    type,\n    fallbackSrc = defaultFallback\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"src\", \"type\", \"fallbackSrc\"]);\n\n  const {\n    0: mediaSrc,\n    1: setMediaSrc\n  } = useState(loader);\n  const {\n    0: fetchStatusOk,\n    1: setFetchStatusOk\n  } = useState(null);\n  const mediaType = type === null || type === void 0 ? void 0 : type.substr(0, 5);\n\n  const fetchRetry = async (url, retries = totalRetries, delay = 5000) => {\n    const res = await fetch(url).catch(() => {});\n    if (res && res.status === 200) return res; // set image src to fallback on firt failed fetch\n\n    if (retries === totalRetries) setMediaSrc(fallbackSrc);\n\n    if (retries > 0) {\n      console.log(`Fetch retry triggered for url (${url}) - retries remaining:`, retries - 1);\n      await timer(delay);\n      return await fetchRetry(url, retries - 1);\n    } else {\n      return res;\n    }\n  };\n\n  const checkSrcAvailable = async () => {\n    try {\n      const res = await fetchRetry(src);\n      if (res) setFetchStatusOk(res.status === 200);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    checkSrcAvailable();\n  }, []);\n  useEffect(() => {\n    if (fetchStatusOk) setMediaSrc(src); // else if(fetchStatusOk !== null && fetchStatusOk===false)\n    //   setMediaSrc(fallbackSrc)\n  }, [fetchStatusOk]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: type !== null && mediaSrc !== fallbackSrc && ( //to remove when we have fb image\n    mediaSrc === fallbackSrc || mediaSrc === loader || mediaType === 'image') ? /*#__PURE__*/_jsx(\"img\", _objectSpread({\n      src: mediaSrc\n    }, rest)) : mediaType === 'video' && /*#__PURE__*/_jsx(\"video\", _objectSpread(_objectSpread({\n      playsInline: true,\n      autoPlay: true,\n      muted: true,\n      loop: true\n    }, rest), {}, {\n      children: /*#__PURE__*/_jsx(\"source\", {\n        id: \"outputVideo\",\n        src: mediaSrc,\n        type: \"video/mp4\"\n      })\n    }))\n  });\n};\n\nexport default Media;","map":null,"metadata":{},"sourceType":"module"}