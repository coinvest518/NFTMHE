{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport AlphaBanner from 'components/base/AlphaBanner';\nimport MainHeader from 'components/base/MainHeader';\nimport ModalBuy from 'components/pages/NFT/ModalBuy';\nimport TernoaWallet from 'components/base/TernoaWallet';\nimport NFTPage from 'components/pages/NFT';\nimport ModalShowcase from 'components/pages/NFT/ModalShowcase';\nimport NotAvailableModal from 'components/base/NotAvailable';\nimport cookies from 'next-cookies';\nimport { getUser } from 'actions/user';\nimport { getNFT } from 'actions/nft';\nimport { getCapsValue } from 'actions/caps';\nimport { onModelClose, onModelOpen } from '../../utils/model-helpers';\n\nconst NftPage = ({\n  user,\n  NFT,\n  capsValue\n}) => {\n  const {\n    0: modalExpand,\n    1: setModalExpand\n  } = useState(false);\n  const {\n    0: exp,\n    1: setExp\n  } = useState(0);\n  const {\n    0: notAvailable,\n    1: setNotAvailable\n  } = useState(false);\n  const {\n    0: type,\n    1: setType\n  } = useState(null);\n  const {\n    0: walletUser,\n    1: setWalletUser\n  } = useState(user);\n  useEffect(() => {\n    async function callBack() {\n      try {\n        let res = await getUser(window.walletId);\n        setWalletUser(res);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (window.isRNApp && window.walletId) callBack();\n  }, []);\n  useEffect(() => {\n    async function callBack() {\n      try {\n        let res = await fetch(NFT.media.url, {\n          method: 'HEAD'\n        });\n        setType(res.headers.get('Content-Type'));\n        return res;\n      } catch (err) {\n        console.log('Error :', err);\n      }\n    }\n\n    callBack();\n  }, []);\n  useEffect(() => {\n    if (exp === 1 || exp === 2) {\n      // we are showing a modal;\n      onModelOpen();\n    } else {\n      onModelClose();\n    }\n  }, [exp]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [NFT.name, \" - SecretNFT\"]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: NFT.description\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: NFT.media.url\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:image\",\n        content: NFT.media.url\n      })]\n    }), notAvailable && /*#__PURE__*/_jsx(NotAvailableModal, {\n      setNotAvailable: setNotAvailable\n    }), [1, 2].indexOf(exp) !== -1 && /*#__PURE__*/_jsx(ModalShowcase, {\n      NFT: NFT,\n      setExp: setExp,\n      exp: exp,\n      setModalExpand: () => setExp(3),\n      type: type,\n      user: walletUser\n    }), exp === 3 && /*#__PURE__*/_jsx(ModalBuy, {\n      setModalExpand: () => setExp(0),\n      id: NFT.id\n    }), modalExpand && /*#__PURE__*/_jsx(TernoaWallet, {\n      setModalExpand: setModalExpand\n    }), /*#__PURE__*/_jsx(AlphaBanner, {}), /*#__PURE__*/_jsx(MainHeader, {\n      user: walletUser,\n      setModalExpand: setModalExpand\n    }), /*#__PURE__*/_jsx(NFTPage, {\n      NFT: NFT,\n      setExp: setExp,\n      setModalExpand: setModalExpand,\n      setNotAvailable: setNotAvailable,\n      user: walletUser,\n      setUser: setWalletUser,\n      type: type,\n      capsValue: capsValue\n    })]\n  });\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = cookies(ctx).token;\n  let user = null,\n      NFT = null,\n      capsValue = 0;\n  const promises = [];\n\n  if (token) {\n    promises.push(new Promise(success => {\n      getUser(token).then(_user => {\n        user = _user;\n        success();\n      }).catch(success);\n    }));\n  }\n\n  promises.push(new Promise(success => {\n    getNFT(ctx.query.name, true, token ? token : null).then(_nft => {\n      NFT = _nft;\n      success();\n    }).catch(success);\n  }));\n  promises.push(new Promise(success => {\n    getCapsValue().then(_value => {\n      capsValue = _value;\n      success();\n    }).catch(success);\n  }));\n  await Promise.all(promises);\n\n  if (!NFT) {\n    return {\n      redirect: {\n        permanent: false,\n        destination: '/'\n      }\n    };\n  }\n\n  return {\n    props: {\n      user,\n      NFT,\n      capsValue\n    }\n  };\n}\nexport default NftPage;","map":null,"metadata":{},"sourceType":"module"}