{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport AlphaBanner from 'components/base/AlphaBanner';\nimport MainHeader from 'components/base/MainHeader';\nimport Landing from 'components/pages/Landing';\nimport TernoaWallet from 'components/base/TernoaWallet';\nimport NotAvailableModal from 'components/base/NotAvailable';\nimport arrayShuffle from 'array-shuffle';\nimport cookies from 'next-cookies';\nimport { getUser, getUsers } from 'actions/user';\nimport { getCategoryNFTs } from 'actions/nft';\n\nconst LandingPage = ({\n  user,\n  users,\n  popularNfts,\n  bestSellingNfts,\n  betaNfts,\n  NFTCreators,\n  totalCountNFT\n}) => {\n  const {\n    0: modalExpand,\n    1: setModalExpand\n  } = useState(false);\n  const {\n    0: notAvailable,\n    1: setNotAvailable\n  } = useState(false);\n  const {\n    0: walletUser,\n    1: setWalletUser\n  } = useState(user);\n  useEffect(() => {\n    async function callBack() {\n      try {\n        let res = await getUser(window.walletId);\n        setWalletUser(res);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (window.isRNApp && window.walletId) callBack();\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"SecretNFT - Welcome\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"SecretNFT Marketplace, by Ternoa.\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: \"ternoa-social-banner.jpg\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:image\",\n        content: \"ternoa-social-banner.jpg\"\n      })]\n    }), modalExpand && /*#__PURE__*/_jsx(TernoaWallet, {\n      setModalExpand: setModalExpand\n    }), notAvailable && /*#__PURE__*/_jsx(NotAvailableModal, {\n      setNotAvailable: setNotAvailable\n    }), /*#__PURE__*/_jsx(AlphaBanner, {}), /*#__PURE__*/_jsx(MainHeader, {\n      user: walletUser,\n      setModalExpand: setModalExpand\n    }), /*#__PURE__*/_jsx(Landing, {\n      setModalExpand: setModalExpand,\n      setNotAvailable: setNotAvailable,\n      user: user,\n      users: users,\n      popularNfts: popularNfts,\n      bestSellingNfts: bestSellingNfts,\n      betaNfts: betaNfts,\n      NFTCreators: NFTCreators,\n      totalCountNFT: totalCountNFT\n    })]\n  });\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = cookies(ctx).token; // category code for beta testers NFTs\n\n  const BETA_CODE = '001';\n  let users = [],\n      user = null,\n      regularNfts = [],\n      betaNfts = [];\n  const promises = [];\n  promises.push(new Promise(success => {\n    getUsers().then(_users => {\n      users = _users;\n      success();\n    }).catch(success);\n  }));\n\n  if (token) {\n    promises.push(new Promise(success => {\n      getUser(token).then(_user => {\n        user = _user;\n        success();\n      }).catch(success);\n    }));\n  }\n\n  promises.push(new Promise(success => {\n    getCategoryNFTs().then(_regularNfts => {\n      regularNfts = _regularNfts;\n      success();\n    }).catch(success);\n  }));\n  promises.push(new Promise(success => {\n    getCategoryNFTs(BETA_CODE).then(_betaNfts => {\n      betaNfts = _betaNfts;\n      success();\n    }).catch(success);\n  }));\n  await Promise.all(promises);\n  users = arrayShuffle(users);\n  betaNfts = arrayShuffle(betaNfts || []).slice(0, 8);\n  let popularNfts = arrayShuffle((regularNfts || []).slice(0, 8));\n  let bestSellingNfts = arrayShuffle((regularNfts || []).slice(9, 17));\n  let NFTCreators = arrayShuffle((regularNfts || []).slice(18, 21));\n  let totalCountNFT = (regularNfts || []).length + (betaNfts || []).length;\n  return {\n    props: {\n      user,\n      users,\n      popularNfts,\n      bestSellingNfts,\n      NFTCreators,\n      betaNfts,\n      totalCountNFT\n    }\n  };\n}\nexport default LandingPage;","map":null,"metadata":{},"sourceType":"module"}