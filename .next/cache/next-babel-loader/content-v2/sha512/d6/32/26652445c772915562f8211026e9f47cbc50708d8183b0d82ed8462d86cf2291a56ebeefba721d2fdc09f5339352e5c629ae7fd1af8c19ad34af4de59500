{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Jimp from 'jimp';\nexport function imgToBlur(_x) {\n  return _imgToBlur.apply(this, arguments);\n}\n\nfunction _imgToBlur() {\n  _imgToBlur = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(NFT) {\n    var image, buffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return Jimp.read(URL.createObjectURL(NFT));\n\n          case 3:\n            image = _context.sent;\n            image.blur(20);\n            _context.next = 7;\n            return image.getBufferAsync('image/jpeg');\n\n          case 7:\n            buffer = _context.sent;\n            return _context.abrupt(\"return\", 'data:image/jpeg;base64,' + buffer.toString('base64'));\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n  return _imgToBlur.apply(this, arguments);\n}\n\nexport function imgToWatermark(_x2) {\n  return _imgToWatermark.apply(this, arguments);\n}\n\nfunction _imgToWatermark() {\n  _imgToWatermark = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(NFT) {\n    var watermark, image, waterMarkSize, waterMarkMargin, wTruncated, xPos, yPos, _waterMarkSize, _waterMarkMargin, hTruncated, _xPos, _yPos, buffer;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return Jimp.read('/TernoaWatermark.png');\n\n          case 2:\n            watermark = _context2.sent;\n            _context2.next = 5;\n            return Jimp.read(URL.createObjectURL(NFT));\n\n          case 5:\n            image = _context2.sent;\n\n            if (!(image.getWidth() > image.getHeight())) {\n              _context2.next = 19;\n              break;\n            }\n\n            waterMarkSize = image.getHeight() / 5;\n            waterMarkMargin = waterMarkSize / 3.5;\n            wTruncated = 500 * image.getHeight() / 800;\n            xPos = image.getWidth() / 2 + wTruncated / 2 - (waterMarkMargin + waterMarkSize);\n            yPos = image.getHeight() - (waterMarkSize + waterMarkMargin);\n            watermark = watermark.resize(waterMarkSize, waterMarkSize);\n            _context2.next = 15;\n            return watermark;\n\n          case 15:\n            watermark = _context2.sent;\n            image.composite(watermark, xPos, yPos, {\n              mode: Jimp.BLEND_OVERLAY,\n              opacityDest: 0.1,\n              opacitySource: 1\n            });\n            _context2.next = 29;\n            break;\n\n          case 19:\n            _waterMarkSize = image.getWidth() / 5;\n            _waterMarkMargin = _waterMarkSize / 3.5;\n            hTruncated = 800 * image.getWidth() / 500;\n            _xPos = image.getWidth() - (_waterMarkSize + _waterMarkMargin);\n            _yPos = image.getHeight() / 2 + hTruncated / 2 - (_waterMarkMargin + _waterMarkSize);\n            watermark = watermark.resize(_waterMarkSize, _waterMarkSize);\n            _context2.next = 27;\n            return watermark;\n\n          case 27:\n            watermark = _context2.sent;\n            image.composite(watermark, _xPos, _yPos, {\n              mode: Jimp.BLEND_OVERLAY,\n              opacityDest: 0.1,\n              opacitySource: 1\n            });\n\n          case 29:\n            _context2.next = 31;\n            return image.getBufferAsync('image/jpeg');\n\n          case 31:\n            buffer = _context2.sent;\n            return _context2.abrupt(\"return\", 'data:image/jpeg;base64,' + buffer.toString('base64'));\n\n          case 33:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _imgToWatermark.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}