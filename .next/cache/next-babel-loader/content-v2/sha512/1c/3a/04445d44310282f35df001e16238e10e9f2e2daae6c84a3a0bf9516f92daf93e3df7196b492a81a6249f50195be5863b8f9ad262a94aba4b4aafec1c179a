{"ast":null,"code":"import Jimp from 'jimp';\nexport async function imgToBlur(NFT) {\n  try {\n    const image = await Jimp.read(URL.createObjectURL(NFT));\n    image.blur(20);\n    const buffer = await image.getBufferAsync('image/jpeg');\n    return 'data:image/jpeg;base64,' + buffer.toString('base64');\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport async function imgToWatermark(NFT) {\n  let watermark = await Jimp.read('/TernoaWatermark.png');\n  const image = await Jimp.read(URL.createObjectURL(NFT));\n\n  if (image.getWidth() > image.getHeight()) {\n    const waterMarkSize = image.getHeight() / 5;\n    const waterMarkMargin = waterMarkSize / 3.5;\n    const wTruncated = 500 * image.getHeight() / 800;\n    const xPos = image.getWidth() / 2 + wTruncated / 2 - (waterMarkMargin + waterMarkSize);\n    const yPos = image.getHeight() - (waterMarkSize + waterMarkMargin);\n    watermark = watermark.resize(waterMarkSize, waterMarkSize);\n    watermark = await watermark;\n    image.composite(watermark, xPos, yPos, {\n      mode: Jimp.BLEND_OVERLAY,\n      opacityDest: 0.1,\n      opacitySource: 1\n    });\n  } else {\n    const waterMarkSize = image.getWidth() / 5;\n    const waterMarkMargin = waterMarkSize / 3.5;\n    const hTruncated = 800 * image.getWidth() / 500;\n    const xPos = image.getWidth() - (waterMarkSize + waterMarkMargin);\n    const yPos = image.getHeight() / 2 + hTruncated / 2 - (waterMarkMargin + waterMarkSize);\n    watermark = watermark.resize(waterMarkSize, waterMarkSize);\n    watermark = await watermark;\n    image.composite(watermark, xPos, yPos, {\n      mode: Jimp.BLEND_OVERLAY,\n      opacityDest: 0.1,\n      opacitySource: 1\n    });\n  }\n\n  const buffer = await image.getBufferAsync('image/jpeg');\n  return 'data:image/jpeg;base64,' + buffer.toString('base64');\n}","map":null,"metadata":{},"sourceType":"module"}