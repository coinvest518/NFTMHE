{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport AlphaBanner from 'components/base/AlphaBanner';\nimport MainHeader from 'components/base/MainHeader';\nimport TernoaWallet from 'components/base/TernoaWallet';\nimport PublicProfile from 'components/pages/PublicProfile';\nimport NotAvailableModal from 'components/base/NotAvailable';\nimport cookies from 'next-cookies';\nimport { getUser, getProfile } from 'actions/user';\nimport { getProfileNFTS } from 'actions/nft';\n\nconst PublicProfilePage = ({\n  user,\n  data,\n  profile\n}) => {\n  const {\n    0: modalExpand,\n    1: setModalExpand\n  } = useState(false);\n  const {\n    0: notAvailable,\n    1: setNotAvailable\n  } = useState(false);\n  const {\n    0: walletUser,\n    1: setWalletUser\n  } = useState(user);\n  const {\n    0: viewProfile,\n    1: setViewProfile\n  } = useState(profile);\n  useEffect(() => {\n    async function callBack() {\n      try {\n        let res = await getUser(window.walletId);\n        setWalletUser(res);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (window.isRNApp && window.walletId) callBack();\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [\"SecretNFT - \", viewProfile.name]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: `Ternoart - ${viewProfile.name} profile page.`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: \"ternoa-social-banner.jpg\"\n      })]\n    }), modalExpand && /*#__PURE__*/_jsx(TernoaWallet, {\n      setModalExpand: setModalExpand\n    }), notAvailable && /*#__PURE__*/_jsx(NotAvailableModal, {\n      setNotAvailable: setNotAvailable\n    }), /*#__PURE__*/_jsx(AlphaBanner, {}), /*#__PURE__*/_jsx(MainHeader, {\n      user: walletUser,\n      setModalExpand: setModalExpand\n    }), /*#__PURE__*/_jsx(PublicProfile, {\n      user: walletUser,\n      setUser: setWalletUser,\n      profile: viewProfile,\n      setProfile: setViewProfile,\n      NFTS: data,\n      setModalExpand: setModalExpand,\n      setNotAvailable: setNotAvailable\n    })]\n  });\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = cookies(ctx).token;\n  let user = null,\n      profile = null,\n      data = [];\n  const promises = [];\n\n  if (token) {\n    promises.push(new Promise(success => {\n      getUser(token).then(_user => {\n        user = _user;\n        success();\n      }).catch(success);\n    }));\n  }\n\n  promises.push(new Promise(success => {\n    getProfile(ctx.query.name, token ? token : null).then(_profile => {\n      profile = _profile;\n      success();\n    }).catch(success);\n  }));\n  promises.push(new Promise(success => {\n    getProfileNFTS(ctx.query.name).then(_nfts => {\n      data = _nfts;\n      success();\n    }).catch(success);\n  }));\n  await Promise.all(promises);\n\n  if (!profile) {\n    return {\n      redirect: {\n        permanent: false,\n        destination: '/'\n      }\n    };\n  }\n\n  return {\n    props: {\n      user,\n      profile,\n      data\n    }\n  };\n}\nexport default PublicProfilePage;","map":null,"metadata":{},"sourceType":"module"}