{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport style from './Edit.module.scss';\nimport Badge from 'components/assets/badge';\nimport gradient from 'random-gradient';\nimport { validateTwitter, validateUrl } from 'utils/strings';\nimport ModalEdit from '../ModalEdit/ModalEdit';\nimport { reviewRequested } from 'actions/user';\n\nconst Edit = ({\n  user,\n  setBanner,\n  setSuccessPopup\n}) => {\n  const bgGradient = user ? {\n    background: gradient(user.name)\n  } : {};\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    walletId: user.walletId,\n    name: user.name,\n    customUrl: user.customUrl,\n    bio: user.bio,\n    personalUrl: user.personalUrl,\n    twitterName: user.twitterName,\n    picture: user.picture,\n    banner: user.banner,\n    reviewRequested: user.reviewRequested,\n    verified: user.verified\n  });\n  const {\n    0: modalEditOpen,\n    1: setModalEditOpen\n  } = useState(false);\n  const isDataValid = data && data.name && data.name.length > 0 && (!data.customUrl || data.customUrl === \"\" || validateUrl(data.customUrl)) && (!data.personalUrl || data.personalUrl === \"\" || validateUrl(data.personalUrl)) && (!data.twitterName || data.twitterName === \"\" || validateTwitter(data.twitterName));\n\n  const handleChange = (value, field) => {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      [field]: value\n    }));\n  };\n\n  const manageSetBanner = x => {\n    setBanner(x);\n    handleChange(x, \"banner\");\n  };\n\n  const fileToUrl = async (x, name) => {\n    let fd = new FormData();\n    let blob = await (await fetch(x)).blob();\n    let file = new File([blob], name);\n    fd.append('file', file);\n    let resUpload = await fetch(`${process.env.NEXT_PUBLIC_SDK_URL}/api/uploadIM`, {\n      method: 'POST',\n      body: fd\n    });\n    let {\n      url\n    } = await resUpload.json();\n\n    if (url) {\n      return url;\n    } else {\n      throw new Error(\"Error while saving media\");\n    }\n  };\n\n  const handleUpdate = async () => {\n    try {\n      if (isDataValid) {\n        var _data$banner, _data$picture;\n\n        //save picture and banner to pinata before sending api if exist and different\n        let updateData = _objectSpread({}, data);\n\n        if (((_data$banner = data.banner) === null || _data$banner === void 0 ? void 0 : _data$banner.substr(0, 4)) === \"blob\") updateData.banner = await fileToUrl(data.banner, 'banner');\n        if (((_data$picture = data.picture) === null || _data$picture === void 0 ? void 0 : _data$picture.substr(0, 4)) === \"blob\") updateData.picture = await fileToUrl(data.picture, 'picture');\n        setData(updateData); //show update modal\n\n        setModalEditOpen(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  async function reviewRequest() {\n    try {\n      let res = await reviewRequested(user.walletId);\n\n      if (res) {\n        setSuccessPopup(true);\n        setData(_objectSpread(_objectSpread({}, data), {}, {\n          reviewRequested: res.reviewRequested\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style.EditContainer,\n      children: [/*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"uploadBanner\",\n        className: style.EditButton,\n        children: [\"Edit banner\", /*#__PURE__*/_jsx(\"div\", {\n          className: style.HiddenShell,\n          children: /*#__PURE__*/_jsx(\"input\", {\n            type: \"file\",\n            id: \"uploadBanner\",\n            onChange: event => {\n              const {\n                target\n              } = event;\n              if (target && target.files) manageSetBanner(URL.createObjectURL(target.files[0]));\n            },\n            className: style.HiddenInput\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: style.Title,\n        children: \"Edit my profile\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style.InnerContainer,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: style.Form,\n          children: [/*#__PURE__*/_jsx(\"h4\", {\n            className: style.Subtitle,\n            children: \"Display Name\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"Enter your display name\",\n            type: \"text\",\n            className: `${style.Input} ${data.name === \"\" ? style.InputError : \"\"}`,\n            value: data.name || '',\n            onChange: e => handleChange(e.target.value, \"name\")\n          }), /*#__PURE__*/_jsx(\"h4\", {\n            className: style.Subtitle,\n            children: \"Custom URL\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"ternoarare.com/enter-your-custom-URL\",\n            type: \"text\",\n            className: `${style.Input} ${data.customUrl && !validateUrl(data.customUrl) ? style.InputError : \"\"}`,\n            value: data.customUrl || '',\n            onChange: e => handleChange(e.target.value, \"customUrl\")\n          }), /*#__PURE__*/_jsx(\"h4\", {\n            className: style.Subtitle,\n            children: \"Bio\"\n          }), /*#__PURE__*/_jsx(\"textarea\", {\n            placeholder: \"Tell about yourself in a few words...\",\n            className: style.Textarea,\n            value: data.bio || '',\n            onChange: e => handleChange(e.target.value, \"bio\")\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: style.TopInput,\n            children: [/*#__PURE__*/_jsx(\"h4\", {\n              className: style.Subtitle,\n              children: \"Twitter username\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: style.ClaimTwitter,\n              children: \"Verify your twitter account\"\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"@username\",\n            type: \"text\",\n            className: `${style.Input} ${data.twitterName && !validateTwitter(data.twitterName) ? style.InputError : \"\"}`,\n            value: data.twitterName || '',\n            onChange: e => handleChange(e.target.value, \"twitterName\")\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: style.TwitterInsight,\n            children: \"Verify your Twitter account in order to get the verification badge\"\n          }), /*#__PURE__*/_jsx(\"h4\", {\n            className: style.Subtitle,\n            children: \"Personal website or portfolio\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            placeholder: \"https://\",\n            type: \"text\",\n            className: `${style.Input} ${data.personalUrl && !validateUrl(data.personalUrl) ? style.InputError : \"\"}`,\n            value: data.personalUrl || '',\n            onChange: e => handleChange(e.target.value, \"personalUrl\")\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: style.Warning,\n            children: \"To update your settings you should sign message through your wallet. Click 'Update profile' then sign the message\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: `${style.Button} ${!isDataValid ? style.ButtonDisabled : \"\"}`,\n            onClick: () => handleUpdate(),\n            children: \"Update your profile\"\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: style.IMG,\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            style: bgGradient,\n            className: style.Avatar,\n            children: data.picture ? /*#__PURE__*/_jsx(\"img\", {\n              draggable: \"false\",\n              className: style.AvatarIMG,\n              src: data.picture\n            }) : /*#__PURE__*/_jsx(\"div\", {\n              className: style.CreatorLetter,\n              children: user.name.charAt(0)\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: style.IMGSize,\n            children: \"500x500px recommanded\"\n          }), /*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: \"uploadProfile\",\n            className: style.UploadButton,\n            children: [\"Upload\", /*#__PURE__*/_jsx(\"div\", {\n              className: style.HiddenShell,\n              children: /*#__PURE__*/_jsx(\"input\", {\n                type: \"file\",\n                id: \"uploadProfile\",\n                onChange: event => {\n                  const {\n                    target\n                  } = event;\n                  if (target && target.files) handleChange(URL.createObjectURL(target.files[0]), \"picture\");\n                },\n                className: style.HiddenInput\n              })\n            })]\n          }), data.verified ? /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Certification,\n            children: [/*#__PURE__*/_jsx(Badge, {\n              className: style.Badge\n            }), \"Certified\"]\n          }) : data.reviewRequested ? /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Certification,\n            children: [/*#__PURE__*/_jsx(Badge, {\n              className: style.Badge\n            }), \"Certification review pending\"]\n          }) : /*#__PURE__*/_jsxs(\"div\", {\n            className: style.Certification,\n            onClick: () => reviewRequest(),\n            children: [/*#__PURE__*/_jsx(Badge, {\n              className: style.Badge\n            }), \"Want to be certified ? Make a request\"]\n          })]\n        })]\n      })]\n    }), modalEditOpen && /*#__PURE__*/_jsx(ModalEdit, {\n      setModalExpand: setModalEditOpen,\n      data: data\n    })]\n  });\n};\n\nexport default Edit;","map":null,"metadata":{},"sourceType":"module"}