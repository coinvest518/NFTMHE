{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mildh/Desktop/nft/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { envStringToCondition } from '../utils/strings';\nexport var filterNFTs = function filterNFTs(data) {\n  return data.filter(function (item) {\n    return item.creatorData && item.ownerData && item.media && envStringToCondition(Number(item.id));\n  });\n};\nexport var getNFTS = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"\".concat(process.env.NEXT_PUBLIC_NODE_API, \"/api/mp/NFTs\"));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            data = filterNFTs(data);\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getNFTS() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getProfileNFTS = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"\".concat(process.env.NEXT_PUBLIC_NODE_API, \"/api/mp/NFTs/owner/\").concat(id));\n\n          case 2:\n            res = _context2.sent;\n\n            if (res.ok) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('error fetching owned NFTs');\n\n          case 5:\n            _context2.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context2.sent;\n            data = filterNFTs(data);\n            return _context2.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getProfileNFTS(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getCreatorNFTS = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(\"\".concat(process.env.NEXT_PUBLIC_NODE_API, \"/api/mp/NFTs/creator/\").concat(id));\n\n          case 2:\n            res = _context3.sent;\n\n            if (res.ok) {\n              _context3.next = 5;\n              break;\n            }\n\n            throw new Error('error fetching created NFTs');\n\n          case 5:\n            _context3.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context3.sent;\n            data = filterNFTs(data);\n            return _context3.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCreatorNFTS(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getCategoryNFTs = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(codes) {\n    var queryString, res, data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            queryString = !codes ? \"\" : typeof codes === 'string' ? \"&codes=\".concat(codes) : \"&codes=\".concat(codes.join(\"&codes=\"));\n            _context4.next = 3;\n            return fetch(\"\".concat(process.env.NEXT_PUBLIC_NODE_API, \"/api/mp/NFTs/category/?listed=1\").concat(queryString));\n\n          case 3:\n            res = _context4.sent;\n\n            if (res.ok) {\n              _context4.next = 6;\n              break;\n            }\n\n            throw new Error('error fetching NFTs');\n\n          case 6:\n            _context4.next = 8;\n            return res.json();\n\n          case 8:\n            data = _context4.sent;\n            data = filterNFTs(data);\n            return _context4.abrupt(\"return\", data);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getCategoryNFTs(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getNFT = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var incViews,\n        viewerWalletId,\n        res,\n        data,\n        _args5 = arguments;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            incViews = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;\n            viewerWalletId = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : null;\n            _context5.next = 4;\n            return fetch(\"\".concat(process.env.NEXT_PUBLIC_NODE_API, \"/api/mp/NFTs/\").concat(id, \"?incViews=\").concat(incViews, \"&viewerWalletId=\").concat(viewerWalletId));\n\n          case 4:\n            res = _context5.sent;\n\n            if (res.ok) {\n              _context5.next = 7;\n              break;\n            }\n\n            throw new Error();\n\n          case 7:\n            _context5.next = 9;\n            return res.json();\n\n          case 9:\n            data = _context5.sent;\n\n            if (!(!data.creatorData || !data.ownerData || !data.media)) {\n              _context5.next = 12;\n              break;\n            }\n\n            throw new Error();\n\n          case 12:\n            return _context5.abrupt(\"return\", data);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getNFT(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}